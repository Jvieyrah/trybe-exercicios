use("cinema")
db.movies.drop();
db.movies.insertMany([
  {
    title: "Batman",
    category: [
      "action",
      "adventure"
    ],
    imdbRating: 7.7,
    budget: 35,
    ratings: [ 85, 100, 102, 105 ],
    description: "The Dark Knight of Gotham City begins his war on crime with his first major enemy being Jack Napier, a criminal who becomes the clownishly homicidal Joker."
  },
  {
    title: "Godzilla",
    category: [
      "action",
      "adventure",
      "sci-fi"
    ],
    imdbRating: 6.6,
    budget: 10,
    ratings: [ 78, 52, 95, 102 ],
    description: "The world is beset by the appearance of monstrous creatures, but one of them may be the only one who can save humanity."
  },
  {
    title: "Home Alone",
    category: [
      "family",
      "comedy"
    ],
    imdbRating: 7.4,
    ratings: [ 200, 99, 65 ],
    description: "An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation."
  },
  {
    title: "Matrix",
    category: [
      "sci-fi",
      "action"
    ],
    imdbRating: 8.7,
    budget: 15,
    ratings: [ 77, 92, 150, 180 ],
    description: "When a beautiful stranger leads computer hacker Neo to a forbidding underworld, he discovers the shocking truth--the life he knows is the elaborate deception of an evil cyber-intelligence."
  },
  {
    title: "Pulp Fiction",
    category: [
      "crime",
      "drama"
    ],
    imdbRating: 8.9,
    budget: 8,
    ratings: [ 110, 84, 95, 90 ],
    description: "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption."
  }
]);

use("cinema")
db.movies.countDocuments()
db.movies.find({})
db.movies.countDocuments()


// Utilizando o operador $all,
// retorne todos os filmes que contenham 
//action e adventure no array category.

use("cinema")
db.movies.find({category: {$all: ["action", "adventure"]}}).pretty()
// Agora retorne os filmes que
// contenham action e sci-fi no array 
//category e possuem nota do IMDB maior do que 7.

use("cinema")

db.movies.find({category: {$all: ["action", "sci-fi"]}, imdbRating: {$gt: 7}}).pretty()

// Retorne todos os filmes com ratings maior do que 103,
// exibindo apenas os campos title e ratings.

use("cinema")

db.movies.find({ratings: {
  $elemMatch: {$gt: 103}
  }
  },
   {title: 1, ratings: 1, _id: 0}).pretty()

// Retorne todos os filmes com ratings entre 100 e 105, 
// exibindo apenas os campos title e ratings.

use("cinema")

db.movies.find({ratings: {  $elemMatch: {$gte: 100, $lte: 105}}}, {title: 1, ratings: 1, _id: 0}).pretty()

// Retorne todos os filmes com ratings entre 64 e 105 e
// divisíveis por 9, exibindo apenas os campos title e 
// ratings.

use("cinema")

db.movies.find({ratings: {$gte: 64, $lte: 105, $mod: [9, 0]}}, {title: 1, ratings: 1, _id: 0}).pretty()

// Retorne somente o título de todos os filmes com dois elementos no array category.

use("cinema")

db.movies.find({category: {$size: 2}}, {title: 1, _id: 0}).pretty()

// Retorne somente o título de todos os filmes com quatro elementos no array category.

use("cinema")

db.movies.find({category: {$size: 4}}, {title: 1, _id: 0}).pretty()

//Busque os filmes em que o módulo 5 do campo budget 
//seja 0 e que o array category tenha tamanho 2.

use("cinema")

db.movies.find({budget: {$mod: [5, 0]}, category: {$size: 2}}).pretty()

// Retorne os filmes da categoria "sci-fi" ou que possua o ratings
// maior do que 199, exibindo apenas os campos title, ratings e category.

use("cinema")

db.movies.find({$or: [{category: "sci-fi"}, {ratings: {$gt: 199}}]}, {title: 1, ratings: 1, category: 1, _id: 0}).pretty()

// Retorne os filmes em que o ratings possua tamanho 4
// e que seja da category "adventure" ou "family", mas 
// que não tenha o imdbRating menor que 7.

use("cinema")

db.movies.find(
  {ratings: {$size: 4},
   category: {$in: ["adventure", "family"]},
   imdbRating: {$not: {$lt: 7}}}
   ).pretty()

// use("cinema")

// db.movies.find(
//   {ratings: {$size: 4}},
//   {category: { $or ["adventure", "family"]}},
//   {imdbRating: {$not: {$lt: 7}}}
// ).pretty()

// Utilizando o operador $regex, retorne todos os filmes em que a descrição comece com a palavra "The".

use("cinema")
  
  db.movies.find({description: {$regex: /^The/}}).pretty()

  // Utilizando o operador $regex, retorne todos os filmes em que a descrição termine com a palavra "humanity.".

  use("cinema")
  
  db.movies.find({description: {$regex: /humanity.$/}}).pretty()

    use("cinema")

  db.movies.find({
  $text:
    {
      $search: "humanity",    
      $caseSensitive: false,
    }
}).pretty()

text index is case insensitive by default and does not support case sensitive search. To perform case sensitive search, you need to create a case sensitive text index.]  }         ]

// Utilizando o operador $regex, retorne todos os filmes em que a descrição contenha a palavra "vacation".


